{"version":3,"sources":["Components/CardItem.js","Components/BuySection.js","Components/Cart.js","App.js","serviceWorker.js","index.js"],"names":["CardItem","products","addInCart","Card","className","CardImg","top","height","width","src","smallImage","CardBody","CardTitle","productName","CardText","productPrice","Button","color","onClick","BuySection","addCart","useState","setProducts","useEffect","Axios","get","headers","Authorization","then","res","allProduct","data","photos","map","photo","medium","tinyImage","tiny","random","word","commerce","price","id","uuid","catch","error","console","log","Container","Row","product","Col","md","key","Cart","cartItem","removeItem","buyNow","amount","forEach","item","parseFloat","fluid","ListGroup","ListGroupItem","length","CardHeader","CardFooter","App","setCardItem","findIndex","array","toast","type","filter","singleItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c664d08a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n    Card,\r\n    CardImg,\r\n    CardBody,\r\n    CardText,\r\n    CardTitle,\r\n    Button,\r\n} from \"reactstrap\";\r\n\r\nconst CardItem = ({ products, addInCart }) => {\r\n\r\n    return (\r\n        <Card className=\"mt-2 mb-1\">\r\n            <CardImg\r\n                top\r\n                height=\"250\"\r\n                width=\"100%\"\r\n                src={products.smallImage}\r\n            />\r\n            <CardBody className=\"text-center\">\r\n                <CardTitle>{products.productName}</CardTitle>\r\n                <CardText className=\"secondary\">Price:{products.productPrice}</CardText>\r\n                <Button color=\"info\" onClick={() => addInCart(products)}>\r\n                    BuyNow\r\n                </Button>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CardItem;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\nimport CardItem from \"./CardItem\"\r\n\r\nimport { random, commerce } from \"faker\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\nconst BuySection = ({ addCart }) => {\r\n  const apiKey = \"563492ad6f9170000100000107b46d8c3d7c48cda538d23ee11e271c\";\r\n  const url = \"https://api.pexels.com/v1/search?query=coffee\";\r\n  const [products, setProducts] = useState([]);\r\n\r\n  const fetchPhotos = () => {\r\n    Axios.get(url, {\r\n      headers: {\r\n        Authorization: apiKey,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        const { data } = res;\r\n        const { photos } = data;\r\n        const allProduct = photos.map((photo) => ({\r\n          smallImage: photo.src.medium,\r\n          tinyImage: photo.src.tiny,\r\n          productName: random.word(),\r\n          productPrice: commerce.price(),\r\n          id: random.uuid(),\r\n        }));\r\n        setProducts(allProduct);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchPhotos();\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <h1 className=\" text-success text-center\">Buy Page</h1>\r\n      <Row>\r\n        {products.map((product) => (\r\n          <Col md={4} key={product.id}>\r\n            <CardItem products={product} addInCart={addCart} />\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default BuySection;\r\n","import React from \"react\"\r\nimport {\r\n    Container,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Button,\r\n    CardHeader,\r\n    CardBody,\r\n    Card,\r\n    CardFooter,\r\n    Col,\r\n    Row\r\n} from \"reactstrap\"\r\n\r\nconst Cart = ({ cartItem, removeItem, buyNow }) => {\r\n    let amount = 0;\r\n    cartItem.forEach(item => {\r\n        amount = parseFloat(amount) + parseFloat(item.productPrice)\r\n    })\r\n\r\n    return (\r\n        <Container fluid>\r\n            <h1 className=\"text-success\">\r\n                Your Cart\r\n            </h1>\r\n            <ListGroup>\r\n                {cartItem.map(\r\n                    item => (\r\n                        <ListGroupItem key={item.id}> <Row>\r\n                            <Col>\r\n                                <img\r\n                                    height=\"80\"\r\n                                    src={item.tinyImage}\r\n                                />\r\n                            </Col>\r\n                            <Col className=\"text-center\">\r\n                                <div className=\"text-primary\">\r\n                                    {item.productName}\r\n                                </div>\r\n                                <span> Price: {item.productPrice} </span>\r\n                                <Button color=\"danger ml-1\" onClick={() => removeItem(item)}>\r\n                                    Remove\r\n                            </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        </ListGroupItem>\r\n                    ))}\r\n            </ListGroup>\r\n            {/* //If cart is empty: */}\r\n            {\r\n                cartItem.length >= 1 ? (\r\n                    <Card className=\"text-center mt-3\">\r\n                        <CardHeader>\r\n                            Grand Total\r\n                                </CardHeader>\r\n                        <CardBody>\r\n                            Your amount for {cartItem.length} is : {amount}\r\n                        </CardBody>\r\n                        <CardFooter >\r\n                            <Button onClick={buyNow} color=\"success\">\r\n                                Pay here to proceed\r\n                            </Button>\r\n                        </CardFooter>\r\n                    </Card>\r\n                ) : (\r\n                        <h1 className=\"text-warning\"> Cart is empty.</h1>\r\n                    )\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default Cart;","import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport BuySection from \"./Components/BuySection\";\nimport Cart from \"./Components/Cart\";\nimport { Row, Col, Container } from \"reactstrap\";\n\n\nfunction App() {\n  const [cartItem, setCardItem] = useState([]);\n\n  const addCart = (item) => {\n    const isAlreadyAdded = cartItem.findIndex(function (array) {\n      return array.id === item.id;\n    });\n    if (isAlreadyAdded !== -1) {\n      toast(\"Already added !\", {\n        type: \"error\",\n      });\n      return;\n    }\n    setCardItem([...cartItem, item]);\n  };\n\n  const buyNow = () => {\n    setCardItem([]);\n    toast(\"Item purchased\", {\n      type: \"success\",\n    });\n  };\n\n  const removeItem = (item) => {\n    setCardItem(cartItem.filter((singleItem) => singleItem.id !== item.id));\n  };\n  return (\n    <Container fluid>\n      <ToastContainer />\n      <Row>\n        <Col md={8}>\n          <BuySection addCart={addCart} />\n        </Col>\n        <Col md={4}>\n          <Cart cartItem={cartItem} removeItem={removeItem} buyNow={buyNow} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}